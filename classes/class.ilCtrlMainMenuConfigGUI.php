<?php
require_once('class.ilCtrlMainMenuPlugin.php');
require_once('class.ilCtrlMainMenuConfig.php');
require_once('./Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/CtrlMainMenu/classes/Entry/class.ctrlmmEntryGUI.php');
require_once('./Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/CtrlMainMenu/classes/Entry/class.ctrlmmEntryTableGUI.php');
require_once('./Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/CtrlMainMenu/classes/Entry/class.ctrlmmEntry.php');
require_once('./Customizing/global/plugins/Services/UIComponent/UserInterfaceHook/CtrlMainMenu/classes/Menu/class.ctrlmmMenu.php');
require_once('./Services/Component/classes/class.ilPluginConfigGUI.php');
require_once('./Services/Form/classes/class.ilPropertyFormGUI.php');
require_once('./Services/Utilities/classes/class.ilConfirmationGUI.php');
require_once('./Services/jQuery/classes/class.iljQueryUtil.php');

/**
 * CtrlMainMenu Configuration
 *
 * @author  Fabian Schmid <fs@studer-raimann.ch>
 * @author  Michael Herren <mh@studer-raimann.ch>
 * @version 2.0.02
 *
 */
class ilCtrlMainMenuConfigGUI extends ilPluginConfigGUI {

	/**
	 *
	 * @var array
	 */
	protected $fields = array();
	/**
	 * @var string
	 */
	protected $table_name = '';
	/**
	 * @var ilCtrlMainMenuPlugin
	 */
	protected $pl;
	/**
	 * @var ilCtrl
	 */
	protected $ctrl;
	/**
	 * @var ilTemplate
	 */
	protected $tpl;
	/**
	 * @var ilTabsGUI
	 */
	protected $tabs;
	/**
	 * @var ilToolbarGUI
	 */
	protected $toolbar;
	/**
	 * @var ilLanguage
	 */
	protected $lng;
	/**
	 * @var ilPropertyFormGUI
	 */
	protected $form;


	public function __construct() {
		global $DIC;
		$this->ctrl = $DIC->ctrl();
		$this->tpl = $DIC->ui()->mainTemplate();
		$this->tabs = $DIC->tabs();
		$this->pl = ilCtrlMainMenuPlugin::getInstance();
		$this->toolbar = $DIC->toolbar();
		$this->lng = $DIC->language();
		if ($_GET['rl']) {
			$this->pl->updateLanguages();
		}
		if (!ctrlmmMenu::isOldILIAS()) {
			if (!ctrlmm::is50()) {
				$this->tpl->addJavaScript('https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js', true, 1);
				ctrlmmEntry::addRestrictedType(ctrlmmMenu::TYPE_REPOSITORY);
			}
			$this->tpl->addJavaScript($this->pl->getDirectory() . '/templates/js/sortable.js');
		}

		ctrlmmMenu::includeAllTypes();
	}


	public function executeCommand() {
		$next_class = $this->ctrl->getNextClass();
		switch ($next_class) {
			case'ctrlmmentrygui':
				$entrygui = ctrlmmEntryInstaceFactory::getInstanceByEntryId($_GET['entry_id'])->getGUIObject($this);
				$this->ctrl->forwardCommand($entrygui);
				break;
			default:
				parent::executeCommand(); // TODO: Change the autogenerated stub
				break;
		}
	}


	/**
	 * @return array
	 */
	public function getFields() {
		$this->fields = array(
			'css_prefix' => array(
				'type' => ilTextInputGUI::class,
			),
			'css_active' => array(
				'type' => ilTextInputGUI::class,
			),
			'css_inactive' => array(
				'type' => ilTextInputGUI::class,
			),
			'doubleclick_prevention' => array(
				'type' => ilCheckboxInputGUI::class,
			),
			'simple_form_validation' => array(
				'type' => ilCheckboxInputGUI::class,
			),
			'replace_full_header' => array(
				'type' => ilCheckboxInputGUI::class,
			),
		);

		return $this->fields;
	}


	/**
	 * Handles all commmands, default is 'configure'
	 */
	function performCommand($cmd) {
		$this->ctrl->setParameter($this, 'parent_id', $_GET['parent_id'] ? $_GET['parent_id'] : 0);
		if ($_GET['parent_id'] > 0) {
			$this->tabs->addTab('mm_admin', $this->pl->txt('back_to_main'), $this->ctrl->getLinkTarget($this, 'resetParent'));
			$this->tabs->addTab('child_admin', $this->pl->txt('tabs_title_childs'), $this->ctrl->getLinkTarget($this, 'configure'));
			$this->tabs->activateTab('child_admin');
		} else {
			$this->tabs->addTab('mm_admin', $this->pl->txt('tab_main'), $this->ctrl->getLinkTarget($this, 'configure'));
			$this->tabs->activateTab('mm_admin');
		}
		$this->tabs->addTab('css', $this->pl->txt('css_settings'), $this->ctrl->getLinkTarget($this, 'cssSettings'));
		if (ctrlmm::hasGlobalCache()) {
			$this->tabs->addTab('cache', $this->pl->txt('cache_settings'), $this->ctrl->getLinkTarget($this, 'cacheSettings'));
		}
		switch ($cmd) {
			case 'configure':
			case 'save':
			case 'saveSorting':
			case 'addEntry':
			case 'createEntry':
			case 'selectEntryType':
				$this->$cmd();
				break;
			default:
				$this->$cmd();
				break;
		}
	}


	public function clearCache() {
		if (ctrlmm::hasGlobalCache()) {
			ilGlobalCache::flushAll();
		}
		ilUtil::sendInfo($this->pl->txt('cache_cleared'), true);
		$this->ctrl->redirect($this, 'cacheSettings');
	}


	protected function cacheSettings() {
		$button = ilLinkButton::getInstance();
		$button->setCaption($this->pl->txt('clear_cache'), false);
		$button->setUrl($this->ctrl->getLinkTarget($this, 'clearCache'));
		$this->toolbar->addButtonInstance($button);
		$this->tabs->activateTab('cache');
		$form = new ilPropertyFormGUI();
		$form->setTitle($this->pl->txt('cache_settings'));
		$form->setFormAction($this->ctrl->getFormAction($this));

		$cb = new ilCheckboxInputGUI($this->pl->txt('activate_cache'), 'activate_cache');
		$cb->setInfo($this->pl->txt('activate_cache_info'));
		$form->addItem($cb);
		$form->setValuesByArray(array( 'activate_cache' => ilCtrlMainMenuConfig::getConfigValue('activate_cache') ));
		$form->addCommandButton('updateCacheSettings', $this->pl->txt('update_cache_settings'));

		$this->tpl->setContent($form->getHTML());
	}


	protected function updateCacheSettings() {
		ilCtrlMainMenuConfig::set('activate_cache', $_POST['activate_cache']);
		ilUtil::sendInfo($this->pl->txt('cache_settings_updated'), true);
		$this->ctrl->redirect($this, 'cacheSettings');
	}


	protected function cssSettings() {
		$this->tabs->activateTab('css');
		$this->initConfigurationForm();
		$this->getValues();
		$this->tpl->setContent($this->form->getHTML());
	}


	public function editChilds() {
		$this->ctrl->setParameter($this, 'parent_id', $_GET['entry_id']);
		$this->ctrl->redirect($this, 'configure');
	}


	public function configure() {
		$table = new ctrlmmEntryTableGUI($this, 'configure', $_GET['parent_id'] ? $_GET['parent_id'] : 0);
		$this->tpl->setContent($table->getHTML());
	}


	public function resetParent() {
		$this->ctrl->setParameter($this, 'parent_id', 0);
		$this->ctrl->redirect($this, 'configure');
	}


	public function saveSorting() {
		foreach ($_POST['position'] as $k => $v) {
			$obj = ctrlmmEntryInstaceFactory::getInstanceByEntryId($v)->getObject();
			if ($obj instanceof ctrlmmEntry) {
				$obj->setPosition($k);
				$obj->update();
			}
		}
		ilUtil::sendSuccess($this->pl->txt('sorting_saved'));
		$this->ctrl->redirect($this);
	}


	public function saveSortingOld() {
		foreach ($_POST['id'] as $k => $v) {
			$obj = ctrlmmEntryInstaceFactory::getInstanceByEntryId($k)->getObject();
			$obj->setPosition($v);
			$obj->update();
		}
		ilUtil::sendSuccess($this->pl->txt('sorting_saved'));
		$this->ctrl->redirect($this);
	}


	public function selectEntryType() {
		$select = new ilPropertyFormGUI();
		$select->setFormAction($this->ctrl->getFormAction($this));
		$select->setTitle($this->pl->txt('select_type'));
		$se = new ilSelectInputGUI($this->pl->txt('common_type'), 'type');
		$se->setOptions(ctrlmmMenu::getAllTypesAsArray(true, $_GET['parent_id']));
		$select->addItem($se);
		$select->addCommandButton('addEntry', $this->pl->txt('common_select'));
		$select->addCommandButton('configure', $this->pl->txt('common_cancel'));
		$this->tpl->setContent($select->getHTML());
	}


	public function addEntry() {
		/**
		 * @var $entry_gui ctrlmmEntryCtrlGUI
		 */
		$type_id = $_POST['type'] ? $_POST['type'] : $_GET['type'];
		$this->ctrl->setParameter($this, 'type', $type_id);
		$entry_gui = ctrlmmEntryInstaceFactory::getInstanceByTypeId($type_id)->getGUIObject($this);
		$entry_gui->initForm();
		$entry_gui->setFormValuesByArray();
		$this->tpl->setContent($entry_gui->form->getHTML());
	}


	public function createObjectAndStay() {
		$this->createObject(false);
		$this->editEntry();
	}


	public function createObject($redirect = true) {
		$type_id = $_POST['type'] ? $_POST['type'] : $_GET['type'];
		$entry_gui = ctrlmmEntryInstaceFactory::getInstanceByTypeId($type_id)->getGUIObject($this);
		$entry_gui->initForm();
		if ($entry_gui->form->checkInput()) {
			$entry_gui->createEntry();
			ilUtil::sendSuccess($this->pl->txt('entry_added'), $redirect);
			if ($redirect) {
				$this->ctrl->redirect($this);
			}
		}
		$entry_gui->form->setValuesByPost();
		$this->tpl->setContent($entry_gui->form->getHTML());
	}


	public function editEntry() {
		/**
		 * @var $entry_gui     ctrlmmEntryCtrlGUI
		 * @var $entry_formgui ctrlmmEntryCtrlFormGUI
		 */
		$this->ctrl->saveParameter($this, 'entry_id');
		$entry_gui = ctrlmmEntryInstaceFactory::getInstanceByEntryId($_GET['entry_id'])->getGUIObject($this);
		$entry_gui->initForm('update');
		$entry_gui->setFormValuesByArray();
		$this->tpl->setContent($entry_gui->form->getHTML());
	}


	public function updateObjectAndStay() {
		$this->updateObject(false);
		$this->editEntry();
	}


	/**
	 * @param bool $redirect
	 */
	public function updateObject($redirect = true) {
		/**
		 * @var $entry_gui ctrlmmEntryCtrlGUI
		 */
		$entry_gui = ctrlmmEntryInstaceFactory::getInstanceByEntryId($_GET['entry_id'])->getGUIObject($this);
		$entry_gui->initForm('update');
		if ($entry_gui->form->checkInput()) {
			$entry_gui->createEntry();
			ilUtil::sendSuccess($this->pl->txt('entry_updated'), $redirect);
			if ($redirect) {
				$this->ctrl->redirect($this);
			}
		}
		$entry_gui->form->setValuesByPost();
		$this->tpl->setContent($entry_gui->form->getHTML());
	}


	public function deleteEntry() {
		$entry = ctrlmmEntryInstaceFactory::getInstanceByEntryId($_GET['entry_id'])->getObject();
		$conf = new ilConfirmationGUI();
		ilUtil::sendQuestion($this->pl->txt('qst_delete_entry'));
		$conf->setFormAction($this->ctrl->getFormAction($this));
		$conf->setConfirm($this->pl->txt('common_delete'), 'deleteObject');
		$conf->setCancel($this->pl->txt('common_cancel'), 'configure');
		$conf->addItem('entry_id', $_GET['entry_id'], $entry->getTitle());
		$this->tpl->setContent($conf->getHTML());
	}


	public function deleteObject() {
		/**
		 * @var $entry ctrlmmEntry
		 */
		$entry = ctrlmmEntryInstaceFactory::getInstanceByEntryId($_POST['entry_id'])->getObject();
		$entry->delete();

		ilUtil::sendSuccess($this->pl->txt('entry_deleted'));
		$this->ctrl->redirect($this, 'configure');
	}


	//
	// Default Configuration
	//
	public function getValues() {
		foreach ($this->getFields() as $key => $item) {
			$values[$key] = ilCtrlMainMenuConfig::getConfigValue($key);
			if (is_array($item['subelements'])) {
				foreach ($item['subelements'] as $subkey => $subitem) {
					$values[$key . '_' . $subkey] = ilCtrlMainMenuConfig::getConfigValue($key . '_' . $subkey);
				}
			}
		}
		$this->form->setValuesByArray($values);
	}


	/**
	 * @return ilPropertyFormGUI
	 */
	public function initConfigurationForm() {
		$this->form = new ilPropertyFormGUI();
		foreach ($this->getFields() as $key => $item) {
			$field = new $item['type']($this->pl->txt($key), $key);
			if ($item['info']) {
				$field->setInfo($this->pl->txt($key . '_info'));
			}
			if (is_array($item['subelements'])) {
				foreach ($item['subelements'] as $subkey => $subitem) {
					$subfield = new $subitem['type']($this->pl->txt($key . '_' . $subkey), $key . '_' . $subkey);
					if ($subitem['info']) {
						$subfield->setInfo($this->pl->txt($key . '_info'));
					}
					$field->addSubItem($subfield);
				}
			}
			$this->form->addItem($field);
		}
		$this->form->addCommandButton('save', $this->lng->txt('save'));
		$this->form->setTitle($this->pl->txt('common_configuration'));
		$this->form->setFormAction($this->ctrl->getFormAction($this));

		return $this->form;
	}


	public function save() {
		$this->initConfigurationForm();
		if ($this->form->checkInput()) {
			foreach ($this->getFields() as $key => $item) {
				ilCtrlMainMenuConfig::set($key, $this->form->getInput($key));
				if (is_array($item['subelements'])) {
					foreach ($item['subelements'] as $subkey => $subitem) {
						ilCtrlMainMenuConfig::set($key . '_' . $subkey, $this->form->getInput($key . '_' . $subkey));
					}
				}
			}
			ilUtil::sendSuccess($this->pl->txt('conf_saved'), true);
			$this->ctrl->redirect($this, 'cssSettings');
		} else {
			$this->form->setValuesByPost();
			$this->tpl->setContent($this->form->getHtml());
		}
	}
}


